{"version":3,"sources":["config.js","ColorOptions.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","storageBucket","COLOR_OPTIONS","value","label","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","writeUserData","Firebase","database","ref","set","state","items","console","log","getItemsData","on","snapshot","data","val","setState","loading","returnImageUrlonUpload","image","storageRef","storage","Promise","resolve","reject","uploadTask","child","concat","name","put","error","getDownloadURL","then","downloadURL","removeData","item","Swal","fire","title","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","result","newState","filter","uid","updateData","refs","category","colors","uploadedImagesUrls","imageUrl","handleInputChange","event","_event$target","target","defineProperty","handleImageFile","length","updatedImages","files","images","deleteImage","itemIndex","imageIndex","splice","handleColorSelect","initializeApp","saveLoading","handleSubmit","bind","assertThisInitialized","prevProps","prevState","preventDefault","updatedImageUrl","i","push","_context","t4","devIndex","findIndex","toConsumableArray","Date","getTime","toString","_this2","_this$state2","react_default","a","createElement","className","react_loader_spinner_default","color","height","width","map","key","style","url","index","umd_default","src","aria-hidden","cursor","onClick","onSubmit","placeholder","onChange","multiple","accept","react_select_browser_esm","isMulti","options","classNamePrefix","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1625cdb1.chunk.js","sourcesContent":["const config = {\n    apiKey: \"AIzaSyBwhYTeN1U33SYw8cHDjAmWgR0x9XGwn5k\",\n    authDomain: \"thirdlove-beabd.firebaseapp.com\",\n    databaseURL: \"https://thirdlove-beabd.firebaseio.com\",\n    storageBucket: \"thirdlove-beabd.appspot.com\",\n  }\n  \n  export default config;","export const COLOR_OPTIONS = [\n    { value: 'black', label: 'Black' },\n    { value: 'yellow', label: 'Yellow' },\n    { value: 'green', label: 'Green' },\n    { value: 'red', label: 'Red' },\n    { value: 'skin', label: 'Skin' },\n    { value: 'white', label: 'White' },\n    { value: 'mustard', label: 'Mustard' },\n    { value: 'purple', label: 'Purple' },\n    { value: 'brown', label: 'Brown' },\n  ];\n  ","import React from 'react';\nimport Firebase from 'firebase';\nimport config from './config';\nimport './App.css';\nimport Swal from 'sweetalert2';\nimport Loader from 'react-loader-spinner';\nimport Img from 'react-image';\nimport Select from 'react-select';\nimport { COLOR_OPTIONS } from './ColorOptions'; \n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      items: [],\n      images:[],\n      updatedImages: [],\n      uploadedImagesUrls: [],\n      name: '',\n      category: '',\n      image: null,\n      loading: true,\n      saveLoading: false,\n      colors: [],\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.getItemsData();\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    // check on previous state\n    // only write when it's different with the new state\n    if (prevState !== this.state) {\n      this.writeUserData();\n    }\n  }\n\n  writeUserData = () => {\n    Firebase.database().ref('/items').set(this.state.items);\n    console.log('DATA SAVED');\n  }\n  \n  getItemsData = () => {\n    let ref = Firebase.database().ref('/');\n    ref.on('value', snapshot => {\n      const data = snapshot.val();\n      this.setState({\n        items: data ? data.items : [],\n        loading: false\n      });\n    });\n  }\n\n  returnImageUrlonUpload = (image) => {\n    const storageService = Firebase.storage();\n    const storageRef = storageService.ref();\n    return new Promise(function(resolve, reject) {\n    const uploadTask = storageRef.child(`images/${image.name}`).put(image); //create a child directory called images, and place the file inside this directory\n    uploadTask.on('state_changed', (snapshot) => {\n      // Observe state change events such as progress, pause, and resume\n      }, (error) => {\n        // Handle unsuccessful uploads\n        reject(error);\n      }, () => {\n         // Do something once upload is complete\n         console.log('File uploaded successfully');\n         uploadTask.snapshot.ref.getDownloadURL().then(function(downloadURL) {\n          console.log('File available at', downloadURL);\n          resolve(downloadURL);\n        });\n      });\n    })\n  }\n\n  async handleSubmit (event) {\n    event.preventDefault();\n    this.setState({ saveLoading: true })\n    const { images, updatedImages, uploadedImagesUrls } = this.state;\n    let imageUrl = [];\n    let updatedImageUrl = [];\n    try {\n      if(uploadedImagesUrls.length && updatedImages.length) {\n        for(let i=0; i<= updatedImages.length; i++) {\n          updatedImageUrl.push(await this.returnImageUrlonUpload(updatedImages[i]));\n        }\n      } else {\n        for(let i=0; i<= images.length; i++) {\n          imageUrl.push(await this.returnImageUrlonUpload(images[i]));\n        }\n      }\n    } catch(error) {\n      console.log('ERROR:', error);\n    }\n\n    let name = this.state.name;\n    let category = this.state.category;\n    let colors = this.state.colors;\n    let uid = this.refs.uid.value;\n    \n    if (uid && name && category){\n      const { items } = this.state;\n      const devIndex = items.findIndex(data => {\n        return data.uid === uid \n      });\n      items[devIndex].name = name;\n      items[devIndex].category = category;\n      items[devIndex].colors = colors;\n      items[devIndex].imageUrl = [...imageUrl, ...updatedImageUrl, ...uploadedImagesUrls];\n      this.setState({ items, saveLoading: false });\n      Swal.fire(\n        'Item Updated!',\n        'Item updated successfully!',\n        'success'\n      )\n    }\n    else if (name && category ) {\n      const uid = new Date().getTime().toString();\n      const { items } = this.state;\n      items.push({ uid, name, category, imageUrl, colors })\n      this.setState({ items, saveLoading: false });\n      Swal.fire(\n        'Item Added!',\n        'Item added successfully!',\n        'success'\n      )\n    }\n\n    this.refs.uid.value = '';\n    this.setState({\n      name: '',\n      category: '',\n      images: [],\n      colors: [],\n      updatedImages: [],\n      uploadedImagesUrls: []\n    })\n  }\n  \n  removeData = (item) => {\n    const { items } = this.state;\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        const newState = items.filter(data => {\n          return data.uid !== item.uid;\n        });\n        this.setState({ items: newState });\n        Swal.fire(\n          'Deleted!',\n          'Your file has been deleted.',\n          'success'\n        )\n      }\n    })\n  }\n  \n  updateData = (item) => {\n    this.refs.uid.value = item.uid;\n    // this.refs.name.value = item.name;\n    // this.refs.category.value = item.category;\\\n    this.setState({\n      name: item.name,\n      category: item.category,\n      colors: item.colors ? item.colors : [],\n      uploadedImagesUrls: item.imageUrl ? item.imageUrl : []\n    })\n  }\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  handleImageFile = (event) => {\n    const { uploadedImagesUrls } = this.state;\n    if(uploadedImagesUrls.length) {\n      this.setState({\n        updatedImages: event.target.files\n      })\n    } else {\n    this.setState({\n      images: event.target.files\n    })\n  }\n  }\n\n  deleteImage = (itemIndex ,imageIndex) => {\n      Swal.fire({\n        title: 'Are you sure you want to delete?',\n        text: \"You won't be able to revert this!\",\n        type: 'warning',\n        showCancelButton: true,\n        confirmButtonColor: '#3085d6',\n        cancelButtonColor: '#d33',\n        confirmButtonText: 'Delete'\n      }).then((result) => {\n        if (result.value) {\n          const { items } = this.state;\n          items[itemIndex].imageUrl.splice(imageIndex, 1);\n          this.setState({ items });\n          Swal.fire(\n            'Deleted!',\n            'Image has been deleted.',\n            'success'\n          )\n        }\n      })\n    }\n\n  handleColorSelect = (val) => {\n    this.setState({ colors: val });\n  }\n\n  render() {\n    const { items,loading } = this.state;\n    console.log(this.state);\n    return(\n      <div className=\"container\">\n        <div className=\"row my-3 text-center\">\n          <div className='col-xl-12 '>\n            <h1>ThirdLove Admin Dashboard</h1>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xl-12'>\n          {loading\n          ?\n          <div className=\"row justify-content-center\">\n            <Loader\n              type=\"RevolvingDot\"\n              color=\"#007bff\"\n              height={150}\n              width={150}\n            />\n          </div>\n          :\n            items.map((item, itemIndex) => \n              <div key={item.uid} className=\"card float-left my-3 mr-3\" style={{width: '18rem'}}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{ item.name }</h5>\n                  <p className=\"card-text\">{ item.category }</p>\n                  {\n                    item.imageUrl && item.imageUrl.length\n                    ?\n                    item.imageUrl.map((url, index) => {\n                      return (\n                        <span key={index}>\n                          <Img className=\"pr-2\" width=\"50px\" height=\"50px\" src={url} />\n                          <span className=\"fa fa-trash\" aria-hidden=\"true\" style={{cursor: 'pointer'}} onClick={() => this.deleteImage(itemIndex, index)} />\n                        </span>\n                      )\n                    })\n                    :\n                    null\n                  }\n                  <h5 className=\"card-title py-2\">Colors: </h5>\n                  {\n                    item.colors && item.colors.length\n                    ?\n                    item.colors.map((color, index) => {\n                      return (\n                        <li key={index} className=\"card-text\">{ color.label }</li>\n                      )\n                    })\n                    :\n                    <p>No Colors Added</p>\n                  }\n                  <p className=\"card-text\">Total Images: { item.imageUrl ? item.imageUrl.length : 'No Images yet...' }</p>\n                  <button onClick={ () => this.removeData(item) } className=\"btn btn-danger mr-2\">Delete</button>\n                  <button onClick={ () => this.updateData(item) } className=\"btn btn-primary mr-2\">Edit</button>\n                </div>\n              </div>\n              )\n          } \n          </div>\n        </div>\n        <div className='row mb-3'>\n          <div className='col-xl-12'>\n            <h1>Add new item here</h1>\n            <form onSubmit={ this.handleSubmit }>\n              <div className=\"form-row\">\n                <input type='hidden' ref='uid' />\n                <div className=\"form-group col-md-6\">\n                  <label>Name</label>\n                  <input type=\"text\" name=\"name\" ref='name' className=\"form-control\" placeholder=\"Name\" value={this.state.name} onChange={this.handleInputChange} />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label>Category</label>\n                  <input type=\"text\" name=\"category\" ref='category' className=\"form-control\" placeholder=\"Category\" value={this.state.category} onChange={this.handleInputChange} />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label>Image</label>\n                  <input type=\"file\" multiple={true} className=\"form-control file-select\" accept=\"image/*\" onChange={this.handleImageFile}/>\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label>Colors</label>\n                  <Select\n                  isMulti\n                  name=\"colors\"\n                  options={COLOR_OPTIONS}\n                  className=\"basic-multi-select\"\n                  classNamePrefix=\"select\"\n                  value={this.state.colors}\n                  onChange={(value) => this.handleColorSelect(value)}\n                />\n                </div>\n              </div>\n              <div className=\"\">\n                <button type=\"submit\" className=\"btn btn-lg btn-success\">Save</button>\n                {this.state.saveLoading\n                ?\n                <Loader\n                  type=\"RevolvingDot\"\n                  color=\"#007bff\"\n                  height={100}\n                  width={100}\n                />\n                : null\n                }\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport 'font-awesome/css/font-awesome.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}