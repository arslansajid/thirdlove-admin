{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","storageBucket","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getImagesData","console","log","imagesUrllArray","Firebase","storage","ref","listAll","then","result","items","forEach","imageRef","getDownloadURL","url","push","catch","error","setState","images","writeUserData","database","set","state","getUserData","on","snapshot","data","val","loading","handleSubmit","event","preventDefault","storageRef","image","child","concat","name","put","role","uid","refs","value","devIndex","findIndex","Swal","fire","Date","getTime","toString","removeData","item","title","text","type","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","newState","filter","updateData","handleInputChange","_event$target","target","defineProperty","handleImageFile","files","initializeApp","prevProps","prevState","_this2","_this$state","react_default","a","createElement","className","react_loader_spinner_default","color","height","width","map","key","style","length","onClick","onSubmit","placeholder","onChange","accept","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.512ba3d9.chunk.js","sourcesContent":["const config = {\n    apiKey: \"AIzaSyBwhYTeN1U33SYw8cHDjAmWgR0x9XGwn5k\",\n    authDomain: \"thirdlove-beabd.firebaseapp.com\",\n    databaseURL: \"https://thirdlove-beabd.firebaseio.com\",\n    storageBucket: \"thirdlove-beabd.appspot.com\",\n  }\n  \n  export default config;","import React from 'react';\nimport Firebase from 'firebase';\nimport config from './config';\nimport './App.css';\nimport Swal from 'sweetalert2';\nimport Loader from 'react-loader-spinner';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    Firebase.initializeApp(config);\n\n    this.state = {\n      items: [],\n      images:[],\n      name: '',\n      role: '',\n      image: null,\n      loading: true,\n    }\n  }\n\n  componentDidMount() {\n    this.getUserData();\n    // this.getImagesData();\n  }\n\n  getImagesData = () => {\n    console.log('fn called'); \n    var imagesUrllArray = [];\n    let storageRef = Firebase.storage().ref('/images');\n    storageRef.listAll()\n    .then(function(result) {\n      result.items.forEach((imageRef) => {\n        imageRef.getDownloadURL()\n        .then(function(url) {\n          imagesUrllArray.push(url);\n        }).catch(function(error) {\n          console.log('Error fetching image URL')\n        });\n      })\n    }).catch(function(error) {\n      // Handle any errors\n    });\n    this.setState({\n      images: imagesUrllArray\n    })\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    // check on previous state\n    // only write when it's different with the new state\n    if (prevState !== this.state) {\n      this.writeUserData();\n    }\n  }\n\n  writeUserData = () => {\n    Firebase.database().ref('/items').set(this.state.items);\n    console.log('DATA SAVED');\n  }\n  \n  getUserData = () => {\n    let ref = Firebase.database().ref('/');\n    ref.on('value', snapshot => {\n      const data = snapshot.val();\n      this.setState({\n        items: data.items,\n        loading: false\n      }, () => {\n        this.getImagesData();\n      });\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const storageService = Firebase.storage();\n    const storageRef = storageService.ref();\n    const { image } = this.state;\n    // let name = this.refs.name.value;\n    // let role = this.refs.role.value;\n\n      if(image) { //fn to upload image\n      const uploadTask = storageRef.child(`images/${image.name}`).put(image); //create a child directory called images, and place the file inside this directory\n      uploadTask.on('state_changed', (snapshot) => {\n      // Observe state change events such as progress, pause, and resume\n      }, (error) => {\n        // Handle unsuccessful uploads\n        console.log(error);\n      }, () => {\n         // Do something once upload is complete\n         console.log('success');\n      });\n    }\n\n    let name = this.state.name;\n    let role = this.state.role;\n    let uid = this.refs.uid.value;\n    \n    if (uid && name && role){\n      const { items } = this.state;\n      const devIndex = items.findIndex(data => {\n        return data.uid === uid \n      });\n      items[devIndex].name = name;\n      items[devIndex].role = role;\n      items[devIndex].image = image;\n      this.setState({ items });\n      Swal.fire(\n        'Item Updated!',\n        'Item updated successfully!',\n        'success'\n      )\n    }\n    else if (name && role ) {\n      const uid = new Date().getTime().toString();\n      const { items } = this.state;\n      items.push({ uid, name, role })\n      this.setState({ items });\n      Swal.fire(\n        'Item Added!',\n        'Item added successfully!',\n        'success'\n      )\n    }\n  \n    // this.refs.name.value = '';\n    // this.refs.role.value = '';\n    // this.refs.uid.value = '';\n    this.setState({\n      name: '',\n      role: '',\n      image: null,\n    })\n  }\n  \n  removeData = (item) => {\n    const { items } = this.state;\n    Swal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      type: 'warning',\n      showCancelButton: true,\n      confirmButtonColor: '#3085d6',\n      cancelButtonColor: '#d33',\n      confirmButtonText: 'Yes, delete it!'\n    }).then((result) => {\n      if (result.value) {\n        const newState = items.filter(data => {\n          return data.uid !== item.uid;\n        });\n        this.setState({ items: newState });\n        Swal.fire(\n          'Deleted!',\n          'Your file has been deleted.',\n          'success'\n        )\n      }\n    })\n    // const newState = items.filter(data => {\n    //   return data.uid !== item.uid;\n    // });\n    // this.setState({ items: newState });\n  }\n  \n  updateData = (item) => {\n    this.refs.uid.value = item.uid;\n    // this.refs.name.value = item.name;\n    // this.refs.role.value = item.role;\\\n    this.setState({\n      name: item.name,\n      role: item.role,\n    })\n  }\n\n  handleInputChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\nhandleImageFile = (event) => {\n  this.setState({\n    image: event.target.files[0]\n  })\n\n}\n\n  render() {\n    const { items, images,loading } = this.state;\n    console.log(this.state);\n    return(\n      <div className=\"container\">\n        <div className=\"row my-3 text-center\">\n          <div className='col-xl-12 '>\n            <h1>ThirdLove Admin Dashboard</h1>\n          </div>\n        </div>\n        <div className='row'>\n          <div className='col-xl-12'>\n          {loading\n          ?\n          <div className=\"row justify-content-center\">\n            <Loader\n              type=\"RevolvingDot\"\n              color=\"#007bff\"\n              height={150}\n              width={150}\n            />\n          </div>\n          :\n            items\n            .map(item => \n              <div key={item.uid} className=\"card float-left my-3 mr-3\" style={{width: '18rem'}}>\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">{ item.name }</h5>\n                  <p className=\"card-text\">{ item.role }</p>\n                  <p className=\"card-text\">Total Images: { images ? images.length : 'No Images yet...' }</p>\n                  <button onClick={ () => this.removeData(item) } className=\"btn btn-danger mr-2\">Delete</button>\n                  <button onClick={ () => this.updateData(item) } className=\"btn btn-primary mr-2\">Edit</button>\n                </div>\n              </div>\n              )\n          } \n          </div>\n        </div>\n        <div className='row mb-3'>\n          <div className='col-xl-12'>\n            <h1>Add new item here</h1>\n            <form onSubmit={ this.handleSubmit }>\n              <div className=\"form-row\">\n                <input type='hidden' ref='uid' />\n                <div className=\"form-group col-md-6\">\n                  <label>Name</label>\n                  <input type=\"text\" name=\"name\" ref='name' className=\"form-control\" placeholder=\"Name\" value={this.state.name} onChange={this.handleInputChange} />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label>Role</label>\n                  <input type=\"text\" name=\"role\" ref='role' className=\"form-control\" placeholder=\"Role\" value={this.state.role} onChange={this.handleInputChange} />\n                </div>\n                <div className=\"form-group col-md-6\">\n                  <label>Image</label>\n                  <input type=\"file\" className=\"form-control file-select\" accept=\"image/*\" onChange={this.handleImageFile}/>\n                </div>\n              </div>\n              <div className=\"\">\n                <button type=\"submit\" className=\"btn btn-lg btn-success\">Save</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}